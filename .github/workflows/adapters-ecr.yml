# Copyright (c) CHOOVIO Inc.
# SPDX-License-Identifier: Apache-2.0
name: adapters-ecr

on:
  push:
    branches: [ "main" ]
    paths:
      - "docker/http-adapter/**"
      - "docker/ws-adapter/**"
      - ".github/workflows/adapters-ecr.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "docker/http-adapter/**"
      - "docker/ws-adapter/**"
      - ".github/workflows/adapters-ecr.yml"
  workflow_dispatch:

# Top-level permissions (good), but we ALSO set job-level below for OIDC
permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-west-2
  ECR_ACCOUNT_ID: 595443389404

jobs:
  build-and-push:
    # Grant OIDC at JOB level (required by aws-actions/configure-aws-credentials)
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Assert AWS_ROLE_ARN is set
        run: |
          if [ -z "${{ secrets.AWS_ROLE_ARN }}" ]; then
            echo "::error::Missing secret AWS_ROLE_ARN (required for OIDC)."
            exit 1
          fi

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: adapters-ecr-build
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Ensure ECR repos exist
        run: |
          set -euo pipefail
          for name in http-adapter ws-adapter; do
            aws ecr describe-repositories --repository-names "$name" >/dev/null 2>&1 || \
              aws ecr create-repository --repository-name "$name" >/dev/null
          done

      # ---- http-adapter (context = repo root; file = docker/http-adapter/Dockerfile) ----
      - name: Build & push http-adapter
        id: http
        run: |
          set -euo pipefail
          REG="${{ env.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          IMAGE="$REG/http-adapter"
          TAG="ci-${GITHUB_SHA::12}"
          docker buildx build \
            --platform linux/amd64 \
            --file docker/http-adapter/Dockerfile \
            --tag "$IMAGE:$TAG" \
            --push \
            .
          DIGEST="$(aws ecr describe-images \
            --repository-name http-adapter \
            --image-ids imageTag="$TAG" \
            --query 'imageDetails[0].imageDigest' \
            --output text)"
          echo "image=$IMAGE@$DIGEST" >> "$GITHUB_OUTPUT"

      # ---- ws-adapter (context = repo root; file = docker/ws-adapter/Dockerfile) ----
      - name: Build & push ws-adapter
        id: ws
        run: |
          set -euo pipefail
          REG="${{ env.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          IMAGE="$REG/ws-adapter"
          TAG="ci-${GITHUB_SHA::12}"
          docker buildx build \
            --platform linux/amd64 \
            --file docker/ws-adapter/Dockerfile \
            --tag "$IMAGE:$TAG" \
            --push \
            .
          DIGEST="$(aws ecr describe-images \
            --repository-name ws-adapter \
            --image-ids imageTag="$TAG" \
            --query 'imageDetails[0].imageDigest' \
            --output text)"
          echo "image=$IMAGE@$DIGEST" >> "$GITHUB_OUTPUT"

      - name: Summarize digests
        run: |
          {
            echo "## Adapter image digests"
            echo "- http-adapter: ${{ steps.http.outputs.image }}"
            echo "- ws-adapter:   ${{ steps.ws.outputs.image }}"
          } >> $GITHUB_STEP_SUMMARY

      - name: Emit standardized RESULTS block
        shell: bash
        run: |
          esc=$'\033'; orange="${esc}[38;5;214m"; reset="${esc}[0m"
          ts="$(date '+%Y-%m-%d %H:%M:%S %z')"
          {
            echo "==== RESULTS ===="
            echo "Action: BuildAndPushAdapters"
            echo "HttpImage: ${{ steps.http.outputs.image }}"
            echo "WsImage:   ${{ steps.ws.outputs.image }}"
            echo "TIMESTAMP: $ts"
            echo "==== END RESULTS ===="
          } | sed "1s/^/${orange}/;$ s/$/${reset}/"
