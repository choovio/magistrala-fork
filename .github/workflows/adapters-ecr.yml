name: adapters-ecr

on:
  push:
    branches: [ "main" ]
    paths:
      - "docker/http-adapter/**"
      - "docker/ws-adapter/**"
      - ".github/workflows/adapters-ecr.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "docker/http-adapter/**"
      - "docker/ws-adapter/**"
      - ".github/workflows/adapters-ecr.yml"

jobs:
  license_guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check SPDX headers (spot-check)
        run: |
          set -euo pipefail
          bad=$(git ls-files | xargs -I{} sh -c 'head -n3 "{}" 2>/dev/null | grep -q "SPDX-License-Identifier" || echo "{}"' | head -n 1 || true)
          if [ -n "$bad" ]; then
            echo "::warning title=SPDX::Missing SPDX header (sample): $bad"
          fi

  supermq_patches_guard:
    runs-on: ubuntu-latest
    needs: license_guard
    steps:
      - uses: actions/checkout@v4
      - name: Enforce patches-only for docker/supermq-docker
        run: |
          set -euo pipefail
          BASE_REF="$(git remote show origin | awk '/HEAD branch/ {print $NF}')"
          git fetch origin +refs/heads/*:refs/remotes/origin/* >/dev/null 2>&1 || true
          CHANGED=$(git diff --name-only "origin/${BASE_REF}"...HEAD -- docker/supermq-docker \
                    | grep -v '^docker/supermq-docker/patches/' || true)
          if [ -n "$CHANGED" ]; then
            echo "::error::Direct edits in docker/supermq-docker detected (use patches/ only):"
            echo "$CHANGED"
            exit 1
          fi
          echo "SuperMQ patches-only policy respected."
        # This guard is why deleting templates/users.tmpl breaks CI. Do not remove it.  # :contentReference[oaicite:7]{index=7}

  discover_build_contexts:
    runs-on: ubuntu-latest
    needs: supermq_patches_guard
    outputs:
      matrix: ${{ steps.ctx.outputs.matrix }}
      count:  ${{ steps.ctx.outputs.count }}
    steps:
      - uses: actions/checkout@v4
      - name: Discover adapter contexts (http/ws, repo root context)
        id: ctx
        run: |
          set -euo pipefail
          includes='[]'
          if [[ -f docker/http-adapter/Dockerfile ]]; then
            includes="$(jq -c '. + [{"name":"http-adapter","context":".","dockerfile":"docker/http-adapter/Dockerfile"}]' <<<"$includes")"
          fi
          if [[ -f docker/ws-adapter/Dockerfile ]]; then
            includes="$(jq -c '. + [{"name":"ws-adapter","context":".","dockerfile":"docker/ws-adapter/Dockerfile"}]' <<<"$includes")"
          fi
          matrix="$(jq -cn --argjson inc "$includes" '{include:$inc}')"
          printf 'matrix=%s\n' "$matrix" >> "$GITHUB_OUTPUT"
          printf 'count=%s\n' "$(jq -r '.include|length' <<<"$matrix")" >> "$GITHUB_OUTPUT"
          echo "$matrix" | jq .

  build_and_push:
    runs-on: ubuntu-latest
    needs: discover_build_contexts
    if: ${{ needs.discover_build_contexts.outputs.count != '0' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover_build_contexts.outputs.matrix) }}
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      IMAGE_PREFIX: choovio/magistrala
      SHA12: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region "$AWS_DEFAULT_REGION" \
            | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"

      - name: Ensure ECR repos exist
        run: |
          set -euo pipefail
          for name in http-adapter ws-adapter; do
            aws ecr describe-repositories --repository-names "$name" >/dev/null 2>&1 || \
              aws ecr create-repository --repository-name "$name" >/dev/null
          done

      - name: Build & Push (${{ matrix.name }})
        id: build
        run: |
          set -euo pipefail
          ECR_REG="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          TAG="ci-${SHA12:0:12}"
          IMAGE="${ECR_REG}/${{ env.IMAGE_PREFIX }}/${{ matrix.name }}:${TAG}"

          docker buildx build \
            --platform linux/amd64 \
            --file "${{ matrix.dockerfile }}" \
            --tag  "$IMAGE" \
            --push \
            "${{ matrix.context }}"

          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Summaries
        run: |
          IMG="${{ steps.build.outputs.image }}"
          DIGEST="$(docker buildx imagetools inspect "$IMG" | awk -F':' '/Digest:/{print $2}' | tr -d ' ')"
          echo "Adapter: ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "Image:   ${IMG}@${DIGEST}"   >> $GITHUB_STEP_SUMMARY
          esc=$(printf '\033'); orange="${esc}[38;5;214m"; reset="${esc}[0m"
          {
            echo "${orange}==== RESULTS ===="
            echo "Action: AdaptersECRBuild"
            echo "Adapter: ${{ matrix.name }}"
            echo "Image: ${IMG}@${DIGEST}"
            echo "TIMESTAMP: $(date -u '+%Y-%m-%d %H:%M:%S %Z')"
            echo "==== END RESULTS ====${reset}"
          } | tee -a "$GITHUB_STEP_SUMMARY"
