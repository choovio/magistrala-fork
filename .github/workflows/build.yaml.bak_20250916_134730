# Copyright (c) Abstract Machines
# SPDX-FileCopyrightText: 2025 CHOOVIO Inc.
# SPDX-License-Identifier: MIT
name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  discover-build-contexts:
    name: Discover Docker build contexts
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.ctx.outputs.matrix }}
      count: ${{ steps.ctx.outputs.count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print context
        run: |
          echo "SHA=$GITHUB_SHA"
          echo "EVENT=${{ github.event_name }}"
          git describe --always --dirty --tags || true

      - name: Find service Docker contexts (addons + adapters)
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
import textwrap
exec(textwrap.dedent("""
    import json, os, pathlib, re, subprocess, sys

    allow_missing = {"http-adapter", "ws-adapter"}

    def git_ls(pattern: str):
        proc = subprocess.run(
            ["git", "ls-files", pattern],
            check=False,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        if proc.returncode not in (0, 1):
            print(proc.stderr, file=sys.stderr)
            sys.exit(proc.returncode)
        return [line.strip() for line in proc.stdout.splitlines() if line.strip()]

    dockerfiles = git_ls("docker/addons/**/Dockerfile")
    filtered = [
        path for path in dockerfiles
        if not re.search(r"docker/addons/(http-adapter|ws-adapter)/Dockerfile$", path)
    ]
    contexts = {str(pathlib.Path(path).parent) for path in filtered}

    for extra in ("docker/http-adapter", "docker/ws-adapter"):
        if pathlib.Path(extra, "Dockerfile").is_file():
            contexts.add(extra)

    contexts = sorted(contexts)
    makefile = pathlib.Path("Makefile")
    make_text = makefile.read_text() if makefile.exists() else ""
    include = []
    skipped = []

    for ctx in contexts:
        dockerfile_path = pathlib.Path(ctx) / "Dockerfile"
        if not dockerfile_path.is_file():
            skipped.append((ctx, "missing Dockerfile"))
            continue

        service = pathlib.Path(ctx).name
        if not re.search(rf"^\\s*{re.escape(service)}:", make_text, re.MULTILINE):
            if service not in allow_missing:
                skipped.append((service, "no Makefile target"))
                continue

        if service == "http-adapter":
            context_path = "."
            dockerfile = "docker/http-adapter/Dockerfile"
        elif service == "ws-adapter":
            context_path = "."
            dockerfile = "docker/ws-adapter/Dockerfile"
        else:
            context_path = ctx
            dockerfile = str(dockerfile_path)

        include.append({
            "service": service,
            "context": context_path,
            "dockerfile": dockerfile,
        })

    matrix = {"include": include}
    print(f"Discovered {len(include)} build context(s).")
    for entry in include:
        print(f"- {entry['service']}: context={entry['context']} dockerfile={entry['dockerfile']}")
    if skipped:
        print("Skipped entries:")
        for name, reason in skipped:
            print(f"  - {name}: {reason}")

    out = os.environ.get("GITHUB_OUTPUT")
    if out:
        with open(out, "a", encoding="utf-8") as fh:
            fh.write(f"matrix={json.dumps(matrix)}\n")
            fh.write(f"count={len(include)}\n")
    else:
        print("matrix=", json.dumps(matrix), sep="")
        print("count=", len(include), sep="")
"""))
PY

  build-and-push:
    name: Build & Push (${{ matrix.service }})
    needs: discover-build-contexts
    if: ${{ fromJson(needs.discover-build-contexts.outputs.count) > 0 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover-build-contexts.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print context
        run: |
          echo "SHA=$GITHUB_SHA"
          echo "EVENT=${{ github.event_name }}"
          git describe --always --dirty --tags || true

      - name: Ensure registry config
        run: |
          test -f ops/ci/registry.env || (echo "Missing ops/ci/registry.env" && exit 1)
          sed -n '1,120p' ops/ci/registry.env

      - name: Load registry config
        id: reg
        run: |
          set -euo pipefail
          REGISTRY="$(grep -E '^REGISTRY=' ops/ci/registry.env | tail -1 | cut -d= -f2-)"
          ORG="$(grep -E '^ORG=' ops/ci/registry.env | tail -1 | cut -d= -f2- || true)"
          IMAGE_PREFIX="$(grep -E '^IMAGE_PREFIX=' ops/ci/registry.env | tail -1 | cut -d= -f2-)"
          [ -n "$REGISTRY" ] && [ -n "$IMAGE_PREFIX" ] || { echo "Bad registry.env"; exit 1; }
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
          echo "org=$ORG" >> $GITHUB_OUTPUT
          echo "image_prefix=$IMAGE_PREFIX" >> $GITHUB_OUTPUT
          echo "sha8=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Export optional AWS config to env
        run: |
          echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN }}" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV

      - name: Docker login (GHCR)
        run: |
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Configure AWS OIDC (optional)
        if: ${{ env.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION != '' && env.AWS_DEFAULT_REGION || 'us-west-2' }}

      - name: Docker login (ECR) (optional)
        if: ${{ env.AWS_ROLE_ARN != '' && env.AWS_ACCOUNT_ID != '' }}
        env:
          FALLBACK_REGION: us-west-2
        run: |
          set -euo pipefail
          : "${AWS_REGION:=${AWS_DEFAULT_REGION:-$FALLBACK_REGION}}"
          ECR_REG="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          echo "ECR_REG=$ECR_REG" >> $GITHUB_ENV
          aws ecr describe-repositories --repository-names "${{ steps.reg.outputs.image_prefix }}" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "${{ steps.reg.outputs.image_prefix }}" --image-scanning-configuration scanOnPush=true >/dev/null
          aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REG"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        id: build
        env:
          REGISTRY: ${{ steps.reg.outputs.registry }}
          ORG: ${{ steps.reg.outputs.org }}
          IMAGE_PREFIX: ${{ steps.reg.outputs.image_prefix }}
          SHA8: ${{ steps.reg.outputs.sha8 }}
          CONTEXT: ${{ matrix.context }}
          DOCKERFILE: ${{ matrix.dockerfile }}
          SERVICE: ${{ matrix.service }}
        run: |
          set -euo pipefail
          if [ -n "$ORG" ]; then
            IMAGE_TAG="$REGISTRY/$ORG/$IMAGE_PREFIX:${SERVICE}-${SHA8}"
          else
            IMAGE_TAG="$REGISTRY/$IMAGE_PREFIX:${SERVICE}-${SHA8}"
          fi
          echo "== Building ${SERVICE} (Dockerfile: ${DOCKERFILE}) from ${CONTEXT} -> ${IMAGE_TAG}"
          docker buildx build \
            --platform linux/amd64 \
            --build-arg SVC="${SERVICE}" \
            --file "${DOCKERFILE}" \
            --tag "${IMAGE_TAG}" \
            --push \
            "${CONTEXT}"
          echo "image_tag=${IMAGE_TAG}" >> "$GITHUB_OUTPUT"

      - name: Mirror to ECR (optional)
        if: ${{ env.ECR_REG != '' }}
        env:
          IMAGE_TAG: ${{ steps.build.outputs.image_tag }}
          IMAGE_PREFIX: ${{ steps.reg.outputs.image_prefix }}
          SERVICE: ${{ matrix.service }}
          SHA8: ${{ steps.reg.outputs.sha8 }}
        run: |
          set -euo pipefail
          ECR_IMG="$ECR_REG/${IMAGE_PREFIX}:${SERVICE}-${SHA8}"
          echo "Mirroring to $ECR_IMG"
          docker pull "$IMAGE_TAG"
          docker tag "$IMAGE_TAG" "$ECR_IMG"
          docker push "$ECR_IMG"
