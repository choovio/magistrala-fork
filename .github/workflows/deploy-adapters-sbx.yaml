# SPDX-License-Identifier: Apache-2.0
# Copyright (c) CHOOVIO Inc.
# Purpose: Deploy only http/ws adapters into SBX without touching other services.

name: Deploy SBX Adapters

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - ops/sbx/http-adapter.yaml
      - ops/sbx/ws-adapter.yaml

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  CLUSTER_NAME: mg-sbx-eks
  NAMESPACE: magistrala

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "$AWS_REGION"

      # Apply manifests first (ensures digests/ingress are current)
      - name: Apply adapter manifests
        run: kubectl -n "$NAMESPACE" apply -f ops/sbx/http-adapter.yaml && kubectl -n "$NAMESPACE" apply -f ops/sbx/ws-adapter.yaml

      # Hard ensure no stuck old replicas: scale down to zero, then back up
      - name: Scale adapters to 0
        run: kubectl -n "$NAMESPACE" scale deploy/http-adapter deploy/ws-adapter --replicas=0

      - name: Wait for zero replicas
        run: |
          kubectl -n "$NAMESPACE" rollout status deploy/http-adapter --timeout=120s || true
          kubectl -n "$NAMESPACE" rollout status deploy/ws-adapter --timeout=120s || true
          # Extra guard: delete any Terminating/Pending adapter pods
          kubectl -n "$NAMESPACE" get pod -l app=http-adapter -o name | xargs -r kubectl -n "$NAMESPACE" delete --force --grace-period=0
          kubectl -n "$NAMESPACE" get pod -l app=ws-adapter   -o name | xargs -r kubectl -n "$NAMESPACE" delete --force --grace-period=0

      - name: Scale adapters to 1
        run: kubectl -n "$NAMESPACE" scale deploy/http-adapter deploy/ws-adapter --replicas=1

      - name: Rollout status http-adapter
        run: kubectl -n "$NAMESPACE" rollout status deploy/http-adapter --timeout=180s

      - name: Rollout status ws-adapter
        run: kubectl -n "$NAMESPACE" rollout status deploy/ws-adapter --timeout=180s

      - name: Show adapter images
        run: kubectl -n "$NAMESPACE" get deploy http-adapter ws-adapter -o 'custom-columns=NAME:.metadata.name,IMAGE:.spec.template.spec.containers[0].image'
