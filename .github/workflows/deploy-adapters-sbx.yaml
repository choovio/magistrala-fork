# SPDX-License-Identifier: Apache-2.0
# Copyright (c) CHOOVIO Inc.
# Purpose: Deploy only http/ws adapters into SBX without touching other services.

name: Deploy SBX Adapters

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - ops/sbx/http-adapter.yaml
      - ops/sbx/ws-adapter.yaml

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  CLUSTER_NAME: mg-sbx-eks
  NAMESPACE: magistrala

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "$AWS_REGION"

      - name: Deploy adapters (delete then apply to avoid immutable selector errors)
        shell: bash
        env:
          NAMESPACE: magistrala
        run: |
          set -euo pipefail
          # Safe delete (ignore if not found)
          kubectl -n "$NAMESPACE" delete deploy/http-adapter --ignore-not-found
          kubectl -n "$NAMESPACE" delete deploy/ws-adapter   --ignore-not-found

          # Apply manifests
          for f in ops/sbx/http-adapter.yaml ops/sbx/ws-adapter.yaml; do
            if [ -f "$f" ]; then
              echo "APPLY: $f"
              kubectl -n "$NAMESPACE" apply -f "$f"
            else
              echo "SKIP: $f not present"
            fi
          done

      - name: Cleanup legacy RS/pods (placeholders/tags/ghcr)
        shell: bash
        env:
          NAMESPACE: magistrala
        run: |
          set -euo pipefail
          for sel in "app=http-adapter" "app.kubernetes.io/name=http-adapter" "app=ws-adapter" "app.kubernetes.io/name=ws-adapter"; do
            mapfile -t rslist < <(kubectl -n "$NAMESPACE" get rs -l "$sel" -o jsonpath='{range .items[*]}{.metadata.name}{" "}{.spec.template.spec.containers[0].image}{"\n"}{end}' 2>/dev/null || true)
            for row in "${rslist[@]:-}"; do
              name="$(awk '{print $1}' <<<"$row")"
              img="$(awk '{print $2}' <<<"$row")"
              if [[ "$img" =~ \<AWS_ACCOUNT_ID\> || "$img" =~ ghcr\.io || "$img" =~ :[A-Za-z0-9._-]+$ ]]; then
                kubectl -n "$NAMESPACE" delete rs "$name" --ignore-not-found
              fi
            done
          done
          kubectl -n "$NAMESPACE" get pod -l 'app in (http-adapter,ws-adapter)' -o name | xargs -r kubectl -n "$NAMESPACE" delete --force --grace-period=0

      - name: Scale up and wait
        shell: bash
        env:
          NAMESPACE: magistrala
        run: |
          set -euo pipefail
          kubectl -n "$NAMESPACE" scale deploy/http-adapter --replicas=1
          kubectl -n "$NAMESPACE" scale deploy/ws-adapter   --replicas=1
          kubectl -n "$NAMESPACE" rollout status deploy/http-adapter --timeout=240s
          kubectl -n "$NAMESPACE" rollout status deploy/ws-adapter   --timeout=240s

      - name: Show images
        shell: bash
        env:
          NAMESPACE: magistrala
        run: |
          kubectl -n "$NAMESPACE" get deploy http-adapter -o jsonpath='{.spec.template.spec.containers[0].image}'; echo
          kubectl -n "$NAMESPACE" get deploy ws-adapter   -o jsonpath='{.spec.template.spec.containers[0].image}'; echo
