# Copyright (c) Abstract Machines
# SPDX-FileCopyrightText: 2025 CHOOVIO Inc.
# SPDX-License-Identifier: MIT
name: Build & Push Adapters

on:
  push:
    branches: ["**"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write         # for AWS OIDC
  packages: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  IMAGE_NAMESPACE: magistrala

concurrency:
  group: adapters-${{ github.ref }}
  cancel-in-progress: false

jobs:
  supermq_patches_guard:
    name: SuperMQ patches-only policy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Enforce patches/ for docker/supermq-docker
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_REF="${{ github.event.pull_request.base.sha }}"
          else
            BASE_BRANCH="$(git remote show origin | awk '/HEAD branch/ {print $NF}')"
            BASE_REF="origin/${BASE_BRANCH}"
          fi
          git fetch origin +refs/heads/*:refs/remotes/origin/* >/dev/null 2>&1 || true
          CHANGED=$(git diff --name-only "$BASE_REF"...HEAD -- docker/supermq-docker | grep -v '^docker/supermq-docker/patches/' || true)
          if [[ -n "$CHANGED" ]]; then
            echo "::error::Direct edits under docker/supermq-docker detected (only patches/ are allowed):"
            echo "$CHANGED"
            exit 1
          fi
          echo "SuperMQ patches-only policy respected."

  build_adapters:
    name: Discover Adapter Contexts
    runs-on: ubuntu-latest
    needs: [supermq_patches_guard]
    outputs:
      matrix: ${{ steps.discover.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Discover adapter contexts
        id: discover
        shell: bash
        run: |
          set -euo pipefail
          mapfile -d '' DIRS < <(find docker -maxdepth 1 -type d -name "*adapter*" -print0 2>/dev/null || true)
          INCLUDES=()
          for dir in "${DIRS[@]}"; do
            [[ -f "$dir/Dockerfile" ]] || continue
            name="$(basename "$dir")"
            INCLUDES+=( "$(jq -n --arg context "$dir" --arg name "$name" '{context:$context,name:$name}')" )
          done
          if [[ ${#INCLUDES[@]} -eq 0 ]]; then
            MATRIX='{"include":[]}'
          else
            MATRIX="$(printf '%s\n' "${INCLUDES[@]}" | jq -s '{include: .}')"
          fi
          echo "matrix=${MATRIX}" >> "$GITHUB_OUTPUT"
          echo "$MATRIX" | jq .

  build_and_push:
    name: Build & Push (${{ matrix.name }})
    runs-on: ubuntu-latest
    needs: build_adapters
    if: ${{ fromJSON(needs.build_adapters.outputs.matrix).include && fromJSON(needs.build_adapters.outputs.matrix).include != '' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.build_adapters.outputs.matrix) }}
    env:
      # Map secrets to env so `if:` checks donâ€™t reference `secrets.*` directly
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME || '' }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID || '' }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        if: ${{ env.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS credentials (access keys)
        if: ${{ env.AWS_ROLE_TO_ASSUME == '' && env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        shell: bash
        run: |
          set -euo pipefail
          REPO="${IMAGE_NAMESPACE}/${{ matrix.name }}"
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$REPO" >/dev/null
          echo "ECR repo ensured: $REPO"

      - name: Set image tags
        id: tags
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::12}"
          IMAGE="${REGISTRY}/${IMAGE_NAMESPACE}/${{ matrix.name }}"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "tag_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "Using tags: ${IMAGE}:${SHORT_SHA} and ${IMAGE}:latest"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          push: true
          tags: |
            ${{ steps.tags.outputs.image }}:${{ steps.tags.outputs.tag_sha }}
            ${{ steps.tags.outputs.image }}:latest
          cache-from: type=registry,ref=${{ steps.tags.outputs.image }}:buildcache
          cache-to: type=registry,ref=${{ steps.tags.outputs.image }}:buildcache,mode=max

      - name: Output image digest
        shell: bash
        run: |
          set -euo pipefail
          DIGEST="$(aws ecr describe-images --repository-name "${IMAGE_NAMESPACE}/${{ matrix.name }}" \
                     --image-ids imageTag=${{ steps.tags.outputs.tag_sha }} \
                     | jq -r '.imageDetails[0].imageDigest')"
          echo "Pushed digest: $DIGEST"
