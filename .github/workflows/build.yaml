# Copyright (c) Abstract Machines
# SPDX-FileCopyrightText: 2025 CHOOVIO Inc.
# SPDX-License-Identifier: MIT
name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  lint-and-build:
    name: Lint and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print context
        run: |
          echo "SHA=$GITHUB_SHA"
          git describe --always --dirty --tags || true

      - name: Ensure registry config
        run: |
          test -f ops/ci/registry.env || (echo "Missing ops/ci/registry.env" && exit 1)
          sed -n '1,120p' ops/ci/registry.env

      - name: Load registry config
        id: reg
        run: |
          set -euo pipefail
          REGISTRY="$(grep -E '^REGISTRY=' ops/ci/registry.env | tail -1 | cut -d= -f2-)"
          ORG="$(grep -E '^ORG=' ops/ci/registry.env | tail -1 | cut -d= -f2- || true)"
          IMAGE_PREFIX="$(grep -E '^IMAGE_PREFIX=' ops/ci/registry.env | tail -1 | cut -d= -f2-)"
          if [ -z "$REGISTRY" ] || [ -z "$IMAGE_PREFIX" ]; then
            echo "Bad registry.env: need REGISTRY and IMAGE_PREFIX"; exit 1; fi
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
          echo "org=$ORG" >> $GITHUB_OUTPUT
          echo "image_prefix=$IMAGE_PREFIX" >> $GITHUB_OUTPUT
          echo "sha8=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Docker login (GHCR)
        # direct docker login (we avoid docker/login-action)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Configure AWS OIDC (optional)
        if: ${{ secrets.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-west-2' }}

      - name: Docker login (ECR) (optional)
        if: ${{ secrets.AWS_ROLE_ARN != '' && secrets.AWS_ACCOUNT_ID != '' }}
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          FALLBACK_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-west-2' }}
        run: |
          set -euo pipefail
          : "${AWS_REGION:=${FALLBACK_REGION}}"
          ECR_REG="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          echo "ECR_REG=$ECR_REG" >> $GITHUB_ENV
          aws ecr describe-repositories --repository-names "${{ steps.reg.outputs.image_prefix }}" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "${{ steps.reg.outputs.image_prefix }}" --image-scanning-configuration scanOnPush=true >/dev/null
          aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REG"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Find Docker contexts
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t contexts < <(git ls-files | grep -Ei '/Dockerfile$' | sed 's|/Dockerfile$||' | sort -u || true)
          printf 'found %s contexts\n' "${#contexts[@]}"
          printf '%s\n' "${contexts[@]}" | nl -ba || true
          if [ "${#contexts[@]}" -eq 0 ]; then
            echo "No Dockerfiles found. Build step will noop."
          fi
          printf '%s' "$(printf '%s\n' "${contexts[@]}")" > contexts.txt

      - name: Build & Push
        env:
          REGISTRY: ${{ steps.reg.outputs.registry }}
          ORG: ${{ steps.reg.outputs.org }}
          IMAGE_PREFIX: ${{ steps.reg.outputs.image_prefix }}
          SHA8: ${{ steps.reg.outputs.sha8 }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -s contexts.txt ]; then
            echo "No contexts; nothing to build."
            exit 0
          fi

          while IFS= read -r ctx; do
            name="$(basename "$ctx")"

            if [ -n "$ORG" ]; then
              ghcr_img="$REGISTRY/$ORG/$IMAGE_PREFIX:${name}-${SHA8}"
            else
              ghcr_img="$REGISTRY/$IMAGE_PREFIX:${name}-${SHA8}"
            fi

            echo "== Building $name from $ctx â†’ $ghcr_img"
            docker buildx build --platform linux/amd64 -t "$ghcr_img" "$ctx" --push

            if [ -n "${ECR_REG:-}" ]; then
              ecr_img="$ECR_REG/${IMAGE_PREFIX}:${name}-${SHA8}"
              echo "Mirroring to $ecr_img"
              docker pull "$ghcr_img"
              docker tag "$ghcr_img" "$ecr_img"
              docker push "$ecr_img"
            fi
          done < contexts.txt
