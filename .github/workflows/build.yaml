# Copyright (c) Abstract Machines
# SPDX-FileCopyrightText: 2025 CHOOVIO Inc.
# SPDX-License-Identifier: MIT
name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  lint-and-build:
    name: Lint and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print context
        run: |
          echo "SHA=$GITHUB_SHA"
          echo "EVENT=${{ github.event_name }}"
          git describe --always --dirty --tags || true

      - name: Ensure registry config
        run: |
          test -f ops/ci/registry.env || (echo "Missing ops/ci/registry.env" && exit 1)
          sed -n '1,120p' ops/ci/registry.env

      - name: Load registry config
        id: reg
        run: |
          set -euo pipefail
          REGISTRY="$(grep -E '^REGISTRY=' ops/ci/registry.env | tail -1 | cut -d= -f2-)"
          ORG="$(grep -E '^ORG=' ops/ci/registry.env | tail -1 | cut -d= -f2- || true)"
          IMAGE_PREFIX="$(grep -E '^IMAGE_PREFIX=' ops/ci/registry.env | tail -1 | cut -d= -f2-)"
          [ -n "$REGISTRY" ] && [ -n "$IMAGE_PREFIX" ] || { echo "Bad registry.env"; exit 1; }
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
          echo "org=$ORG" >> $GITHUB_OUTPUT
          echo "image_prefix=$IMAGE_PREFIX" >> $GITHUB_OUTPUT
          echo "sha8=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      # Export optional AWS secrets to env so we can gate on env (safe for PRs from forks)
      - name: Export optional AWS config to env
        run: |
          echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN }}" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV

      - name: Docker login (GHCR)
        run: |
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Configure AWS OIDC (optional)
        if: ${{ env.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION != '' && env.AWS_DEFAULT_REGION || 'us-west-2' }}

      - name: Docker login (ECR) (optional)
        if: ${{ env.AWS_ROLE_ARN != '' && env.AWS_ACCOUNT_ID != '' }}
        env:
          FALLBACK_REGION: us-west-2
        run: |
          set -euo pipefail
          : "${AWS_REGION:=${AWS_DEFAULT_REGION:-$FALLBACK_REGION}}"
          ECR_REG="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          echo "ECR_REG=$ECR_REG" >> $GITHUB_ENV
          aws ecr describe-repositories --repository-names "${{ steps.reg.outputs.image_prefix }}" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "${{ steps.reg.outputs.image_prefix }}" --image-scanning-configuration scanOnPush=true >/dev/null
          aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REG"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Find service Docker contexts (addons + adapters)
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          declare -a contexts=()

          while IFS= read -r dockerfile; do
            contexts+=("${dockerfile%/Dockerfile}")
          done < <(git ls-files 'docker/addons/**/Dockerfile' \
            | grep -vE 'docker/addons/(http-adapter|ws-adapter)/Dockerfile' \
            | sort -u || true)

          for extra in docker/http-adapter docker/ws-adapter; do
            if git ls-files --error-unmatch "${extra}/Dockerfile" >/dev/null 2>&1; then
              contexts+=("${extra}")
            fi
          done

          if [ "${#contexts[@]}" -gt 0 ]; then
            mapfile -t contexts < <(printf '%s\n' "${contexts[@]}" | sort -u)
          fi

          printf 'found %s candidate contexts\n' "${#contexts[@]}"
          printf '%s\n' "${contexts[@]}" | nl -ba || true

          if [ "${#contexts[@]}" -gt 0 ]; then
            printf '%s\n' "${contexts[@]}" > contexts.txt
          else
            : > contexts.txt
          fi

      - name: Build & Push
        env:
          REGISTRY: ${{ steps.reg.outputs.registry }}
          ORG: ${{ steps.reg.outputs.org }}
          IMAGE_PREFIX: ${{ steps.reg.outputs.image_prefix }}
          SHA8: ${{ steps.reg.outputs.sha8 }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -s contexts.txt ]; then
            echo "No service contexts found. Nothing to build."
            exit 0
          fi

          allow_missing_targets=(http-adapter ws-adapter)

          while IFS= read -r ctx; do
            [[ -n "$ctx" ]] || continue
            name="$(basename "$ctx")"

            skip_target_check=no
            for svc in "${allow_missing_targets[@]}"; do
              if [ "$name" = "$svc" ]; then
                skip_target_check=yes
                break
              fi
            done

            if ! grep -Eq "^[[:space:]]*${name}:" Makefile; then
              if [ "$skip_target_check" = yes ]; then
                echo "Allowing $name without Makefile target (dedicated adapter Dockerfile)"
              else
                echo "Skip $name (no matching 'make ${name}' target)"; continue
              fi
            fi

            dockerfile_path="${ctx}/Dockerfile"
            if [ ! -f "$dockerfile_path" ]; then
              echo "Skip $name (no Dockerfile at $dockerfile_path)"; continue
            fi

            # Compose GHCR target
            if [ -n "$ORG" ]; then
              ghcr_img="$REGISTRY/$ORG/$IMAGE_PREFIX:${name}-${SHA8}"
            else
              ghcr_img="$REGISTRY/$IMAGE_PREFIX:${name}-${SHA8}"
            fi

            echo "== Building $name from $ctx (Dockerfile: $dockerfile_path) â†’ $ghcr_img"
            docker buildx build \
              --platform linux/amd64 \
              --build-arg SVC="$name" \
              -f "$dockerfile_path" \
              -t "$ghcr_img" \
              "$ctx" \
              --push

            # Optional ECR mirror (only if AWS creds present)
            if [ -n "${ECR_REG:-}" ]; then
              ecr_img="$ECR_REG/${IMAGE_PREFIX}:${name}-${SHA8}"
              echo "Mirroring to $ecr_img"
              docker pull "$ghcr_img"
              docker tag "$ghcr_img" "$ecr_img"
              docker push "$ecr_img"
            fi
          done < contexts.txt
