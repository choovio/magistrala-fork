# Copyright (c) CHOOVIO Inc.
# SPDX-License-Identifier: Apache-2.0

name: CI Pipeline

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  checks: write

concurrency:
  group: adapters-${{ github.ref }}
  cancel-in-progress: false

jobs:
  supermq-patches-guard:
    name: SuperMQ patches-only guard (diff vs base)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Block direct edits under docker/supermq-docker
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_REF="${{ github.event.pull_request.base.sha }}"
          else
            BASE_BRANCH="$(git remote show origin | awk '/HEAD branch/ {print $NF}')"
            BASE_REF="origin/${BASE_BRANCH}"
          fi
          git fetch origin +refs/heads/*:refs/remotes/origin/* >/dev/null 2>&1 || true
          CHANGED=$(git diff --name-only "$BASE_REF"...HEAD -- docker/supermq-docker | grep -v '^docker/supermq-docker/patches/' || true)
          if [[ -n "$CHANGED" ]]; then
            echo "::error::Direct edits in docker/supermq-docker detected (use patches/ only):"
            echo "$CHANGED"; exit 1
          fi
          echo "SuperMQ patches-only policy respected."

      - name: License Guard
        shell: bash
        run: |
          set -euo pipefail
          declare -a missing_files=()
          tracked="$(git ls-files | grep -E '\.(go|sh|Dockerfile|dockerfile|ya?ml|tf|ts|js|md)$' | grep -Ev '(^|/)(go\.sum|\.editorconfig|\.gitattributes)$' || true)"
          for f in ${tracked}; do
            # First 5 lines, normalize CRLF, strip UTF-8 BOM if present
            head -n 5 "$f" | LC_ALL=C tr -d '\r' | sed '1s/^\xEF\xBB\xBF//' > /tmp/head5.txt
            if ! grep -qi 'SPDX-License-Identifier:' /tmp/head5.txt; then
              echo "$f: missing SPDX-License-Identifier in first 5 lines" >> "$GITHUB_STEP_SUMMARY"
              missing_files+=("$f")
              continue
            fi
            if ! grep -qi 'Copyright (c) .*CHOOVIO Inc' /tmp/head5.txt; then
              echo "$f: missing CHOOVIO copyright line in first 5 lines" >> "$GITHUB_STEP_SUMMARY"
              missing_files+=("$f")
            fi
          done
          if [ ${#missing_files[@]} -ne 0 ]; then
            printf '%s\n' "License header check failed" >&2
            printf '%s\n' "${missing_files[@]}" >&2
            exit 1
          fi

  discover-build-contexts:
    name: Discover Docker build contexts
    runs-on: ubuntu-latest
    needs: supermq-patches-guard
    outputs:
      matrix: ${{ steps.ctx.outputs.matrix }}
      count:  ${{ steps.ctx.outputs.count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Discover adapter contexts (bash; one-line outputs)
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          enc() { jq -Rsc @json; }  # not used but handy
          find_main() {
            local needle="$1"
            # candidates: .../cmd/<name>, .../<name>, .../services/<name>
            mapfile -t CANDIDATES < <(git ls-files | grep -E "/(cmd/)?${needle}(/|$)|(^|/)${needle}(/|$)|/services/${needle}(/|$)" | xargs -r -I{} dirname {} | sort -u)
            for d in "${CANDIDATES[@]}"; do
              if [[ -f "$d/main.go" ]] || grep -q 'package main' "$d"/*.go 2>/dev/null; then
                echo "$d"; return 0
              fi
            done
            echo ""
          }
          includes='[]'
          http_main="$(find_main 'http-adapter')"
          ws_main="$(find_main 'ws-adapter')"

          if [[ -f docker/http-adapter/Dockerfile && -n "$http_main" ]]; then
            includes="$(jq -c --arg m "$http_main" '. + [{"name":"http-adapter","context":".","dockerfile":"docker/http-adapter/Dockerfile","main":$m}]' <<<"$includes")"
          fi
          if [[ -f docker/ws-adapter/Dockerfile && -n "$ws_main" ]]; then
            includes="$(jq -c --arg m "$ws_main" '. + [{"name":"ws-adapter","context":".","dockerfile":"docker/ws-adapter/Dockerfile","main":$m}]' <<<"$includes")"
          fi

          matrix="$(jq -cn --argjson inc "$includes" '{include:$inc}')"
          printf 'matrix=%s\n' "$matrix" >> "$GITHUB_OUTPUT"
          printf 'count=%s\n' "$(jq -r '.include|length' <<<"$matrix")" >> "$GITHUB_OUTPUT"
          echo "$matrix" | jq .

  build-adapters:
    name: Build adapters (${{ matrix.name }})
    runs-on: ubuntu-latest
    needs: discover-build-contexts
    if: ${{ needs.discover-build-contexts.outputs.count != '0' }}
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID || '000000000000' }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN || '' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover-build-contexts.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials (push only on main)
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR (push only on main)
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        env:
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        run: |
          aws ecr get-login-password --region "$AWS_DEFAULT_REGION" \
            | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"

      - name: Build adapters
        uses: docker/build-push-action@v6
        with:
          context:   ${{ matrix.context }}
          file:      ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push:      ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags:      ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') && format('{0}.dkr.ecr.{1}.amazonaws.com/choovio/magistrala/{2}:{3}', env.AWS_ACCOUNT_ID, env.AWS_DEFAULT_REGION, matrix.name, github.sha) || format('choovio/magistrala/{0}:{1}', matrix.name, github.sha) }}
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to:   type=gha,mode=max
