name: Matrix Scout (no-build sanity)

on:
  push:
    branches: [ sbx-matrix-scout ]
    paths:
      - "ops/matrix/matrix.json"
      - ".github/workflows/matrix-scout.yml"
  pull_request:
    branches: [ main, sbx-matrix-scout ]
    paths:
      - "ops/matrix/matrix.json"
      - ".github/workflows/matrix-scout.yml"
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  scout:
    name: Validate matrix.json (no builds)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq present
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read matrix file
        id: read
        shell: bash
        run: |
          set -euo pipefail
          FILE="ops/matrix/matrix.json"
          if [[ ! -f "$FILE" ]]; then
            echo "::error file=$FILE::matrix.json not found"
            exit 1
          fi
          cat "$FILE" | jq '.' >/dev/null
          echo "ok"

      - name: Validate entries and print report
        id: validate
        shell: bash
        run: |
          set -euo pipefail
          FILE="ops/matrix/matrix.json"
          ECR=$(jq -r '.ecrRepo' "$FILE")
          COUNT=$(jq -r '.services | length' "$FILE")

          echo "ECR repo: $ECR"
          echo "Services: $COUNT"
          echo

          FAIL=0
          printf "%-14s | %-24s | %-18s | %-9s | %-10s\n" "service" "dockerfile" "context" "unresolved" "port"
          printf -- "---------------------------------------------------------------------------------------------\n"

          # Validate each service
          jq -c '.services[]' "$FILE" | while read -r row; do
            name=$(jq -r '.name' <<<"$row")
            dockerfile=$(jq -r '.dockerfile' <<<"$row")
            context=$(jq -r '.context' <<<"$row")
            unresolved=$(jq -r '.unresolved // false' <<<"$row")
            target=$(jq -r '.target' <<<"$row")
            port=$(jq -r '.expectedContainerPort // ""' <<<"$row")
            notes=$(jq -r '.notes // ""' <<<"$row")
            # Basic file existence checks
            if [[ -n "$dockerfile" && ! -f "$dockerfile" ]]; then
              echo "::error title=Missing dockerfile::$name → $dockerfile not found"
              FAIL=1
            fi
            if [[ -n "$context" && ! -d "$context" && "$context" != "." ]]; then
              echo "::error title=Missing context::$name → $context not found"
              FAIL=1
            fi
            # Target existence (optional)
            if [[ -n "$target" ]]; then
              # Soft-check: search target label in Dockerfile
              if ! grep -E "^\s*FROM .* AS ${target}\b" -n "$dockerfile" >/dev/null 2>&1; then
                echo "::warning title=Target not found::Docker target '$target' not found in $dockerfile for $name"
              fi
            fi
            # Unresolved is a hard fail
            if [[ "$unresolved" == "true" ]]; then
              echo "::error title=Unresolved service::$name is marked unresolved. Notes: $notes"
              FAIL=1
            fi

            printf "%-14s | %-24s | %-18s | %-9s | %-10s\n" "$name" "$dockerfile" "$context" "$unresolved" "$port"
          done

          echo
          if [[ "$FAIL" -ne 0 ]]; then
            echo "::group::Matrix Scout Summary"
            echo "One or more services are unresolved or misconfigured. See errors above."
            echo "This workflow intentionally fails until services are resolvable and ready to add to the build matrix."
            echo "::endgroup::"
            exit 1
          fi
          echo "Matrix looks resolvable. OK."

      - name: Upload matrix.json as artifact (for auditing)
        uses: actions/upload-artifact@v4
        with:
          name: matrix-json
          path: ops/matrix/matrix.json

