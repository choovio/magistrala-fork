# SPDX-FileCopyrightText: 2025 CHOOVIO Inc.
# SPDX-License-Identifier: MIT
# ci-touch: 2025-09-12T11:41:59-07:00
---
name: ECR Build / Build and Push to ECR (core-only)

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile*'
      - 'cmd/**'
      - '.github/workflows/ecr-build.yml'
  pull_request:
    paths:
      - 'Dockerfile*'
      - 'cmd/**'
      - '.github/workflows/ecr-build.yml'
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

# We dynamically discover Dockerfile.* but KEEP ONLY a safe allowlist of core services.
# This avoids failing on optional readers/writers that aren’t ready yet.
jobs:
  discover:
    name: Discover Dockerfiles → matrix (filtered)
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
      count:  ${{ steps.mk.outputs.count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Build filtered matrix
        id: mk
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=( Dockerfile.* )

          # Allow only core services for now (expand later when stable)
          allow=( bootstrap users things certs domains provision reports re )

          declare -A ok=()
          for a in "${allow[@]}"; do ok["$a"]=1; done

          json='{"include":['
          count=0
          for f in "${files[@]}"; do
            svc="${f#Dockerfile.}"
            [[ -z "$svc" ]] && continue
            [[ -n "${ok[$svc]:-}" ]] || continue
            [[ $count -gt 0 ]] && json+=','
            json+="{\"service\":\"${svc}\",\"dockerfile\":\"${f}\"}"
            ((count++))
          done
          json+=']}'

          echo "All Dockerfiles found:"
          printf '  %s\n' "${files[@]}" | sed '/^$/d' || true
          echo "Allowed services:"
          printf '  %s\n' "${allow[@]}"
          echo "Selected (${count}) for build:"
          echo "${json}"

          echo "matrix=${json}" >> "$GITHUB_OUTPUT"
          echo "count=${count}"  >> "$GITHUB_OUTPUT"

  build:
    name: Build & Push (${{ matrix.service }})
    needs: discover
    if: ${{ github.event_name == 'push' && fromJson(needs.discover.outputs.count) > 0 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Validate AWS secrets present
        shell: bash
        run: |
          : "${AWS_REGION:?Set repo secret AWS_DEFAULT_REGION}"
          : "${AWS_ROLE_ARN:?Set repo secret AWS_ROLE_ARN (full ARN)}"
          : "${AWS_ACCOUNT_ID:?Set repo secret AWS_ACCOUNT_ID}"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gobee-ci-${{ github.run_id }}

      - name: Ensure ECR repository exists
        shell: bash
        env: { SVC: ${{ matrix.service }} }
        run: |
          set -euo pipefail
          aws ecr describe-repositories --region "${AWS_REGION}" --repository-names "${SVC}" >/dev/null 2>&1 \
            || aws ecr create-repository --region "${AWS_REGION}" --repository-name "${SVC}" >/dev/null
          echo "ECR repo ready: ${SVC}"

      - name: Derive tags
        id: tags
        shell: bash
        run: |
          echo "sha=$(git rev-parse --short=12 HEAD)" >> "$GITHUB_OUTPUT"
          echo "date=$(date +%Y%m%d%H%M%S)"        >> "$GITHUB_OUTPUT"
          echo "branch=${GITHUB_REF_NAME//\//-}"   >> "$GITHUB_OUTPUT"

      - name: ECR login (AWS CLI)
        shell: bash
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
            | docker login --username AWS --password-stdin \
              "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

      - name: Build image
        shell: bash
        env:
          DOCKERFILE: ${{ matrix.dockerfile }}
          SVC:        ${{ matrix.service }}
        run: |
          set -euo pipefail
          test -f "${DOCKERFILE}" || { echo "Missing ${DOCKERFILE}"; exit 1; }
          echo "Building ${SVC} with ${DOCKERFILE}"
          docker build -f "${DOCKERFILE}" -t "tmp/${SVC}:build" .

      - name: Tag & push
        shell: bash
        env: { SVC: ${{ matrix.service }} }
        run: |
          set -euo pipefail
          IMAGE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${SVC}"
          docker tag "tmp/${SVC}:build" "${IMAGE}:${{ steps.tags.outputs.sha }}"
          docker tag "tmp/${SVC}:build" "${IMAGE}:${{ steps.tags.outputs.date }}"
          docker tag "tmp/${SVC}:build" "${IMAGE}:${{ steps.tags.outputs.branch }}-latest"
          docker push "${IMAGE}:${{ steps.tags.outputs.sha }}"
          docker push "${IMAGE}:${{ steps.tags.outputs.date }}"
          docker push "${IMAGE}:${{ steps.tags.outputs.branch }}-latest"

  pr-noop:
    name: PR build skipped (no AWS secrets)
    needs: discover
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Skipping ECR push on PR (no secrets)."
          echo "Matrix: ${{ needs.discover.outputs.matrix }}"

  noop-when-empty:
    name: No eligible Dockerfiles found (noop)
    needs: discover
    if: ${{ github.event_name == 'push' && fromJson(needs.discover.outputs.count) == 0 }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "No core Dockerfiles discovered — skipping."
