# SPDX-FileCopyrightText: 2025 CHOOVIO Inc.
# SPDX-License-Identifier: MIT
---
name: ECR Build / Build and Push to ECR

on:
  push:
    branches: [ main ]
    paths:
      - 'cmd/**'
      - 'Dockerfile*'
      - '.github/workflows/ecr-build.yml'
  workflow_dispatch: {}

permissions:
  id-token: write   # OIDC for AWS
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}     # set this repo secret (e.g., us-west-2)
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}         # full ARN, e.g., arn:aws:iam::595443389404:role/GithubActionsECRPush
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}     # 12-digit account ID

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Core services (map to explicit Dockerfiles)
          - service: bootstrap
            dockerfile: Dockerfile.bootstrap
          - service: users
            dockerfile: Dockerfile.users
          - service: things
            dockerfile: Dockerfile.things
          - service: certs
            dockerfile: Dockerfile.certs
          - service: domains
            dockerfile: Dockerfile.domains
          - service: provision
            dockerfile: Dockerfile.provision

          # Readers/Writers (names taken from failing checks)
          - service: postgres-reader
            dockerfile: Dockerfile.postgres-reader
          - service: postgres-writer
            dockerfile: Dockerfile.postgres-writer
          - service: timescale-reader
            dockerfile: Dockerfile.timescale-reader
          - service: timescale-writer
            dockerfile: Dockerfile.timescale-writer

          # Reports & Rules (“re” from failing checks)
          - service: reports
            dockerfile: Dockerfile.reports
          - service: re
            dockerfile: Dockerfile.re

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate AWS configuration
        shell: bash
        run: |
          : "${AWS_REGION:?Set repo secret AWS_DEFAULT_REGION}"
          : "${AWS_ROLE_ARN:?Set repo secret AWS_ROLE_ARN (full ARN)}"
          : "${AWS_ACCOUNT_ID:?Set repo secret AWS_ACCOUNT_ID}"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gobee-ci-${{ github.run_id }}

      - name: Derive tags
        id: tags
        shell: bash
        run: |
          echo "sha=$(git rev-parse --short=12 HEAD)" >> "$GITHUB_OUTPUT"
          echo "date=$(date +%Y%m%d%H%M%S)" >> "$GITHUB_OUTPUT"
          echo "branch=${GITHUB_REF_NAME//\//-}" >> "$GITHUB_OUTPUT"

      - name: ECR login (AWS CLI)
        shell: bash
        run: |
          aws ecr get-login-password --region "${{ env.AWS_REGION }}" \
            | docker login --username AWS --password-stdin \
              "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"

      - name: Build image
        shell: bash
        env:
          SVC: ${{ matrix.service }}
          DOCKERFILE: ${{ matrix.dockerfile }}
        run: |
          if [ ! -f "${DOCKERFILE}" ]; then
            echo "ERROR: Missing ${DOCKERFILE} for service ${SVC}"; ls -la | sed -n '1,200p'; exit 1
          fi
          docker build \
            -f "${DOCKERFILE}" \
            -t "tmp/${SVC}:build" \
            .

      - name: Tag & push
        shell: bash
        env:
          SVC: ${{ matrix.service }}
        run: |
          REGION="${{ env.AWS_REGION }}"
          ACCOUNT="${{ env.AWS_ACCOUNT_ID }}"
          IMAGE="${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com/${SVC}"

          docker tag "tmp/${SVC}:build" "${IMAGE}:${{ steps.tags.outputs.sha }}"
          docker tag "tmp/${SVC}:build" "${IMAGE}:${{ steps.tags.outputs.date }}"
          docker tag "tmp/${SVC}:build" "${IMAGE}:${{ steps.tags.outputs.branch }}-latest"

          docker push "${IMAGE}:${{ steps.tags.outputs.sha }}"
          docker push "${IMAGE}:${{ steps.tags.outputs.date }}"
          docker push "${IMAGE}:${{ steps.tags.outputs.branch }}-latest"
