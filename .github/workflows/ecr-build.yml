# SPDX-FileCopyrightText: 2025 CHOOVIO Inc.
# SPDX-License-Identifier: MIT
---
name: ECR Build / Build and Push to ECR (dynamic)

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile*'
      - 'cmd/**'
      - '.github/workflows/ecr-build.yml'
  pull_request:
    paths:
      - 'Dockerfile*'
      - 'cmd/**'
      - '.github/workflows/ecr-build.yml'
  workflow_dispatch: {}

permissions:
  id-token: write   # for AWS OIDC
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}   # e.g., us-west-2
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}       # full ARN
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}   # 12-digit account id

jobs:
  discover:
    name: Discover Dockerfiles → matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
      count: ${{ steps.mk.outputs.count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Find Dockerfile.* and build matrix JSON
        id: mk
        shell: bash
        run: |
          shopt -s nullglob
          files=( Dockerfile.* )
          # Build JSON array of {"service":"X","dockerfile":"Dockerfile.X"}
          json='{"include":['
          count=0
          for f in "${files[@]}"; do
            # service name = suffix after "Dockerfile."
            svc="${f#Dockerfile.}"
            # Skip obvious non-services if any
            if [[ -z "$svc" ]]; then continue; fi
            [[ $count -gt 0 ]] && json+=','
            json+="{\"service\":\"${svc}\",\"dockerfile\":\"${f}\"}"
            ((count++))
          done
          json+=']}'
          echo "Discovered ${count} Dockerfiles:"
          printf '%s\n' "${files[@]}" | sed '/^$/d' || true
          echo "matrix=${json}" >> "$GITHUB_OUTPUT"
          echo "count=${count}" >> "$GITHUB_OUTPUT"
          echo "---- MATRIX JSON ----"
          echo "${json}"

  build:
    name: Build & Push (${{ matrix.service }})
    needs: discover
    if: ${{ fromJson(needs.discover.outputs.count) > 0 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Validate AWS secrets present
        shell: bash
        run: |
          : "${AWS_REGION:?Set repo secret AWS_DEFAULT_REGION}"
          : "${AWS_ROLE_ARN:?Set repo secret AWS_ROLE_ARN (full ARN)}"
          : "${AWS_ACCOUNT_ID:?Set repo secret AWS_ACCOUNT_ID}"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gobee-ci-${{ github.run_id }}

      - name: Derive tags
        id: tags
        shell: bash
        run: |
          echo "sha=$(git rev-parse --short=12 HEAD)" >> "$GITHUB_OUTPUT"
          echo "date=$(date +%Y%m%d%H%M%S)" >> "$GITHUB_OUTPUT"
          echo "branch=${GITHUB_REF_NAME//\//-}" >> "$GITHUB_OUTPUT"

      - name: ECR login (AWS CLI)
        shell: bash
        run: |
          aws ecr get-login-password --region "${{ env.AWS_REGION }}" \
            | docker login --username AWS --password-stdin \
              "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"

      - name: Build image
        shell: bash
        env:
          DOCKERFILE: ${{ matrix.dockerfile }}
          SVC: ${{ matrix.service }}
        run: |
          if [ ! -f "${DOCKERFILE}" ]; then
            echo "ERROR: Missing ${DOCKERFILE}"; exit 1
          fi
          docker build -f "${DOCKERFILE}" -t "tmp/${SVC}:build" .

      - name: Tag & push
        shell: bash
        env:
          SVC: ${{ matrix.service }}
        run: |
          REGION="${{ env.AWS_REGION }}"
          ACCOUNT="${{ env.AWS_ACCOUNT_ID }}"
          IMAGE="${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com/${SVC}"

          docker tag "tmp/${SVC}:build" "${IMAGE}:${{ steps.tags.outputs.sha }}"
          docker tag "tmp/${SVC}:build" "${IMAGE}:${{ steps.tags.outputs.date }}"
          docker tag "tmp/${SVC}:build" "${IMAGE}:${{ steps.tags.outputs.branch }}-latest"

          docker push "${IMAGE}:${{ steps.tags.outputs.sha }}"
          docker push "${IMAGE}:${{ steps.tags.outputs.date }}"
          docker push "${IMAGE}:${{ steps.tags.outputs.branch }}-latest"

  noop-when-empty:
    name: No Dockerfiles found (noop)
    needs: discover
    if: ${{ fromJson(needs.discover.outputs.count) == 0 }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "No Dockerfile.* present — skipping ECR build."
