# Copyright (c) CHOOVIO Inc.
# SPDX-License-Identifier: Apache-2.0

# Purpose: SBX OpenAPI seed contract for console integration

openapi: 3.1.0
info:
  title: SBX API (GoBee Console Contract Seed)
  version: 0.1.0
  description: |
    Minimal contract seed to eliminate guesswork while wiring the console.
    NOTE: This file contains placeholders clearly labeled **TBD**. Replace with
    upstream-verified fields once SBX confirms the contract.

servers:
  - url: https://sbx.gobee.io/api
    description: SBX upstream (default)
  - url: /api/sbx
    description: GoBee Console proxy (local/dev via Next.js route)

tags:
  - name: Health
  - name: Devices

paths:
  /health:
    get:
      tags: [Health]
      summary: Liveness probe
      operationId: getHealth
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: ok

  /devices:
    get:
      tags: [Devices]
      summary: List devices (paginated)
      operationId: listDevices
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/XTenantId'
        - name: cursor
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
        - name: q
          in: query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum: [name, lastSeen, status]
            default: name
        - name: order
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: List of devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicesPage'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /devices/{id}:
    get:
      tags: [Devices]
      summary: Get a device by ID
      operationId: getDevice
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/XTenantId'
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Device found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    XTenantId:
      name: X-Tenant-ID
      in: header
      required: false
      schema:
        type: string
        example: dev-tenant-123

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    DevicesPage:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Device'
        nextCursor:
          type: string
          nullable: true
        total:
          type: integer
          nullable: true
      required: [items]

    Device:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/DeviceStatus'
        lastSeen:
          type: string
          format: date-time
          nullable: true
        tags:
          type: array
          items: { type: string }
          default: []
        metadata:
          type: object
          additionalProperties: true
      required: [id, name, status]

    DeviceStatus:
      type: string
      enum: [online, offline, unknown]

    Error:
      type: object
      properties:
        error:
          type: string
      required: [error]
